services:
  tigerbeetle_0:
    container_name: tigerbeetle_0
    image: ghcr.io/tigerbeetle/tigerbeetle
    command: "start --addresses=0.0.0.0:3001 /data/0_0.tigerbeetle"
    networks: [appnet]
    cap_add:   
      - IPC_LOCK
    volumes:
      - ./data:/data
    security_opt:
      - "seccomp=unconfined"
    ports:
      - "3000:3001"

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
      POSTGRES_DB: ${POSTGRES_DB:-orderbook_db}
      TB_ADDRESS: ${TB_ADDRESS:-3001}
      TB_CLUSTER_ID: ${TB_CLUSTER_ID:-1}
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [appnet]

  orderbook:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: orderbook_app
    depends_on:
      - postgres
      - tigerbeetle_0
    security_opt:
      - "seccomp=unconfined"
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-myuser}
      DB_PASSWORD: ${DB_PASSWORD:-mypassword}
      DB_NAME: ${DB_NAME:-orderbook_db}
      TB_ADDRESS : ${TB_ADDRESS:-3001}
      TB_CLUSTER_ID: ${TB_CLUSTER_ID:-0}
    ports:
      - "8080:8080"  # optional: expose port 8080 on host (for direct testing if needed)
                     # Not strictly required since Caddy will proxy traffic.
    restart: unless-stopped
    networks: [appnet]
  
  caddy:
    image: caddy:latest
    container_name: caddy_proxy
    depends_on:
      - orderbook
      # - plausible   # (if you add Plausible later)
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile  # mount your Caddyfile configuration
    restart: unless-stopped



networks:
  appnet:
    driver: bridge